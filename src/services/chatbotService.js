// Ejemplo: Moviendo la simulaci√≥n aqu√≠
const simulateServerResponse = (message) => {
  const responses = [
    { text: "¬°Ja ja ja! Eso fue muy gracioso.\nMe encanta tu sentido del humor. üòÇ", emoji: "üòÇ" },
    { text: "Entiendo perfectamente lo que dices.\n¬øEn qu√© m√°s puedo ayudarte hoy? üòä", emoji: "üòä" },
    { text: "Lamento mucho escuchar eso.\nSi necesitas hablar o ayuda, estoy aqu√≠ para ti. üò¢", emoji: "üò¢" },
    { text: "Vaya, esa es una pregunta muy interesante.\nD√©jame pensarlo un momento... ü§î", emoji: "ü§î" },
    { text: "¬°Totalmente de acuerdo contigo!\nEsa es una excelente perspectiva. üëç", emoji: "üëç" },
    { text: "¬°Eso es maravilloso!\nMe alegra mucho escucharlo. ‚ù§Ô∏è", emoji: "‚ù§Ô∏è" },
    { text: "¬°Vaya!\nNo me esperaba esa respuesta. üòÆ", emoji: "üòÆ" },
    { text: "Gracias por compartir eso conmigo.\n¬øHay algo m√°s en lo que pueda ayudarte hoy? üòä", emoji: "üòä" }
  ];
  message = message.toLowerCase();
  if (message.includes('jaja') || message.includes('risa') || message.includes('divertido') || message.includes('üòÇ')) return responses[0];
  if (message.includes('triste') || message.includes('mal') || message.includes('tristeza') || message.includes('deprimido') || message.includes('üò¢')) return responses[2];
  if (message.includes('?') || message.includes('por qu√©') || message.includes('c√≥mo') || message.includes('cu√°ndo') || message.includes('ü§î')) return responses[3];
  if (message.includes('gracias') || message.includes('agradecimiento') || message.includes('agradezco') || message.includes('‚ù§Ô∏è')) return responses[5];
  if (message.includes('sorpresa') || message.includes('incre√≠ble') || message.includes('wow') || message.includes('üòÆ')) return responses[6];
  if (message.includes('hola') || message.includes('buenos d√≠as') || message.includes('buenas tardes') || message.includes('üòä')) return responses[1];
  if (message.includes('ok') || message.includes('vale') || message.includes('entiendo') || message.includes('üëç')) return responses[4];
  return responses[Math.floor(Math.random() * responses.length)];
};

// La funci√≥n que necesita ser exportada
export const getChatbotResponse = async (userMessageText, chatHistory) => {
  // Simula una llamada as√≠ncrona
  await new Promise(resolve => setTimeout(resolve, 500)); // Simula delay de red

  const simulatedData = simulateServerResponse(userMessageText);

  // Devuelve la estructura esperada { responseText, analysis }
  // Por ahora, analysis puede ser null o un objeto vac√≠o.
  return {
      responseText: simulatedData.text, // Asume que simulateServerResponse devuelve { text, emoji }
      analysis: { sentiment: 'neutral', emoji: simulatedData.emoji } // Ejemplo de an√°lisis
  };
}; 